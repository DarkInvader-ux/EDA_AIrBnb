{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":611395,"sourceType":"datasetVersion","datasetId":268833}],"dockerImageVersionId":30918,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from matplotlib import pyplot as plt \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport seaborn as sns\n\ndf = pd.read_csv(\"/kaggle/input/new-york-city-airbnb-open-data/AB_NYC_2019.csv\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"neighbourhood_group = df[\"neighbourhood_group\"].values\nprice = df[\"price\"].values\nplt.scatter(neighbourhood_group, price)\nplt.xlabel(\"neighbourhood_group\")\nplt.ylabel(\"price\")\nplt.plot()\nnan_rows = df[df.isnull().T.any()]\ndf.duplicated()\nnan_rows # listings with zero reviews have NaN values for last_review and reviews_per_month","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"room_type = df[\"room_type\"].values\nplt.scatter(room_type, price)\nplt.xlabel(\"room_type\")\nplt.ylabel(\"price\")\nplt.plot()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from scipy.stats import zscore\n\n# Calculate Z-scores for price column\ndf['z_score'] = zscore(df['price'])\n\n# Keep only data where Z-score is within [-3, 3]\ndf_filtered = df[df['z_score'].abs() < 3]\n\n# Drop the z_score column as it's no longer needed\ndf_filtered = df_filtered.drop(columns=['z_score'])\n\n# Print results\nprint(f\"Original dataset size: {df.shape[0]} rows\")\nprint(f\"Filtered dataset size: {df_filtered.shape[0]} rows\")\nprint(f\"Number of outliers removed: {df.shape[0] - df_filtered.shape[0]}\")\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_filtered['price_log'] = np.log1p(df_filtered['price'])  # log1p handles zero values safely\ndf_filtered['price_log'] = np.log1p(df_filtered['price'])  # log1p includes +1 to avoid log(0)\ndf_filtered[['price', 'price_log']].head(10)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.histplot(df_filtered['price_log'], bins=50, kde=True)\nplt.title('Log-Transformed Distribution of Airbnb Prices')\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"columns_to_drop = ['name', 'host_name', 'neighbourhood','last_review', 'reviews_per_month', 'id', 'host_id', 'z_score']\ndf_filtered = df.drop(columns=columns_to_drop, axis=1, errors='ignore')\n\n# Apply one-hot encoding to categorical columns\ndf_encoded = pd.get_dummies(df_filtered, columns=['neighbourhood_group','room_type'], drop_first=True)\n\n# Compute the correlation matrix\ncorr_matrix = df_encoded.corr()\n\n# Plot the heatmap\nplt.figure(figsize=(15, 10))\nsns.heatmap(corr_matrix, annot=False, cmap=\"coolwarm\", fmt=\".2f\", linewidths=0.5)\nplt.title(\"Feature Correlation Matrix\")\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# higher price doesn't necessarily mean private room type\n# higher the price less availability\n# no positive correlations\n# lattitude increases in listings in Manhattan\n# longtitude increases in listings in Queens\n# there's some correlation between avaliability and calculated host listings count","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"availability_365 = df[\"availability_365\"].values\nplt.scatter(availability_365, price)\nplt.xlabel(\"availability_365\")\nplt.ylabel(\"price\")\nplt.plot()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# no linear relationship between price and availability\ndf.describe()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.value_counts()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(10, 5))\nsns.boxplot(x=\"room_type\", y=\"availability_365\", data=df)\nplt.xticks(rotation=45)  # Rotate labels for better readability\nplt.title(\"Availability of Listings per Room Type\")\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}